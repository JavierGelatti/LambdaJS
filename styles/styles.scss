#contenedor .lambda {
    display: block;
    text-align: center;
    margin-bottom: 1em;
    color: black;
    font-family: serif;

    .expression {
        &::after {
            content: ':)';
            font-size: .7em;
            line-height: 1.2em;
            background: lightgreen;
            width: 30px;
            height: 30px;
            display: block;
            position: absolute;
            right: -15px;
            bottom: -15px;
            border-radius: 15px;
            transform: rotate(90deg);
            color: darkgreen;
            opacity: 0;
            transition-duration: 1s;
            transition-delay: .5s;
            visibility: hidden;
        }
    }

    &.success {
        .expression {
            &::after {
                opacity: 1;
                visibility: visible;
            }
        }
    }

    button {
        svg {
            width: 1em;
        }

        &[disabled] {
            /*visibility: hidden;*/
            color: gray;

            svg {
                fill: gray;
            }
        }
    }

    .actions {
        display: block;
    }

    .expression {
        font-size: 1.5em;
        margin: .5em;
        display: inline-block;
        position: relative;

        .application, .abstraction {
            border-radius: .3em;
            padding: .3em;
            background: #80808020;
            display: inline-block;
            user-select: none;
            white-space: nowrap;
        }

        .variable {
            border-radius: .3em;
            padding: 0 .2em;
            background: #80808020;
            display: inline-block;
            user-select: none;
        }

    .variable-tbd > span {
      min-width: 1em;
      display: inline-block;
      background: red;
      cursor: text;
      user-select: text !important;
      &::selection {
        color: white;
        background: transparent;
      }
    }

        .parameter .variable {
            padding: 0 .1em;

            &:not(.hovered) {
                background: transparent;
            }
        }

        .abstraction, .application {
            cursor: pointer;
        }

        .application {
            .function {
                margin-right: .3em;
            }
        }

        .abstraction {
            & > .parameter::before {
                content: 'λ';
            }

            & > .parameter::after {
                content: '.';
            }
        }

        /*
        .application > .function > .abstraction,
        .application > .argument > .application {
            border-left: 1px solid black;
            border-right: 1px solid black;
        }
        */

        .application > .function > .application > .argument > .abstraction::before,
        .application > .function > .abstraction::before,
        .application > .argument > .application::before {
            content: '(';
        }

        .application > .function > .application > .argument > .abstraction::after,
        .application > .function > .abstraction::after,
        .application > .argument > .application::after {
            content: ')';
        }

        .hole {
            &.active {
                background: transparent;

                &::after {
                    background: yellow;
                }
            }

            &.hovered {
                background: transparent;

                &::after {
                    background-color: yellow;
                }
            }

            &::after {
                display: inline-block;
                background: orange;
                content: ' ';
                width: .7em;
                height: .7em;
                cursor: pointer;
            }
        }

        .actions-container {
            display: inline-block;
            position: relative;

            .actions {
                display: block;
                transition-duration: .5s;

                & > span {
                    margin-right: .1em;
                    display: inline-block;
                    background: red;
                    border-radius: .6em;
                    height: 1.2em;
                    width: 1.2em;
                    text-align: center;
                    overflow: hidden;

                    cursor: pointer;
                    transition-duration: .2s;

                    &::after {
                        /* Center overflowing text*/
                        text-align: center;
                        margin-left: -100%;
                        margin-right: -100%;
                    }

                    &:hover {
                        transform: scale(1.1);
                    }
                }
            }
        }

        span {
            .actions {
                transform: translateY(10px) translateX(-50px);
                opacity: 0;
                visibility: hidden;
                position: absolute;
                display: flex;
            }

            &.hovered {
                background: #90ee9060;
            }

            &.active {
                background: lightgreen;

                & > .actions,
                & > .actions-container .actions {
                    transform: translateY(10px);
                    opacity: 1;
                    visibility: visible;
                }
            }

            .rename {
                line-height: .86em;

                &::after {
                    font-size: .6em;
                    content: '✏️';
                }
            }

            .delete {
                line-height: 1.3em;

                &::after {
                    content: '×';
                }
            }

            .wrapLambda {
                line-height: 1em;

                &::after {
                    content: 'λx.';
                    font-size: .6em;
                }
            }

            .wrapApplicationArgument {
                line-height: .9em;

                &::after {
                    content: '(_ x)';
                    font-size: .55em;
                }
            }

            .wrapApplicationFunction {
                line-height: .9em;

                &::after {
                    content: '(f _)';
                    font-size: .55em;
                }
            }
        }

        .insertVariable {
            line-height: 1.1em;

            &::after {
                content: 'x';
            }
        }

        .insertAbstraction {
            line-height: 1.2em;

            &::after {
                content: 'λ';
            }
        }

        .insertApplication {
            line-height: 1em;

            &::after {
                content: '()';
                font-size: .8em;
            }
        }
    }
}
